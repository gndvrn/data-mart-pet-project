x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  env_file:
    - .env
  environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_USER}:${AIRFLOW_PASSWORD}@postgres/${AIRFLOW_DB}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__PARALLELISM: 2  # Ограничиваем до 2 параллельных задач
      AIRFLOW__CORE__DAG_CONCURRENCY: 2  # Ограничиваем задачи на DAG
      AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: 2  # Макс. активных задач в DAG
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD}
  volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./dbt:/opt/airflow/dbt_project
  depends_on:
      postgres:
        condition: service_healthy
  mem_limit: 1024m
  networks:
    - data-mart-network


services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      AIRFLOW_USER: ${AIRFLOW_USER}
      AIRFLOW_PASSWORD: ${AIRFLOW_PASSWORD}
      AIRFLOW_DB: ${AIRFLOW_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/db-init:/docker-entrypoint-initdb.d # Инициализация структуры бд
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AIRFLOW_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    mem_limit: 512m
    networks:
      - data-mart-network

  af-webserver:
    <<: *airflow-common
    container_name: af-webserver
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  af-scheduler:
    <<: *airflow-common
    container_name: af-scheduler
    command: scheduler
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c "airflow db migrate"
    depends_on:
      postgres:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9001:9001"  # UI
      - "9002:9000"  # API
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    mem_limit: 256m
    networks:
      - data-mart-network

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    environment:
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    mem_limit: 768m
    networks:
      - data-mart-network

  spark:
    image: bitnami/spark:3.5.0
    container_name: spark
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
    ports:
      - "8083:8080"
    volumes:
      - ./scripts:/opt/bitnami/spark/scripts
    mem_limit: 1024m
    networks:
      - data-mart-network

  superset:
    container_name: superset
    build:
      context: ./superset
      dockerfile: Dockerfile
    environment:
      ADMIN_USERNAME: ${SUPERSET_ADMIN_USERNAME}
      ADMIN_EMAIL: ${SUPERSET_ADMIN_EMAIL}
      ADMIN_PASSWORD: ${SUPERSET_ADMIN_PASSWORD}
      SUPERSET_SECRET_KEY: ${SUPERSET_SECRET_KEY}
    volumes:
      - ./superset/superset_data:/app/superset_home
    ports: 
      - '8088:8088'
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    mem_limit: 512m
    networks:
      - data-mart-network

networks:
  data-mart-network:
    driver: bridge

volumes:
  postgres-data:
  minio-data:
  clickhouse-data:
  superset-home: